// Code generated by sysl DO NOT EDIT.
package petdemo

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"testing"

	"github.com/anz-bank/sysl-go/core"
	"github.com/anz-bank/sysl-go/testutil/e2e"
	"github.com/stretchr/testify/require"

	"github.com/anz-bank/sysl-go-demo/internal/gen/pkg/servers/Petdemo/petstore"
	"github.com/anz-bank/sysl-go-demo/internal/gen/pkg/servers/Petdemo/pokeapi"
)

// TestServer for Petdemo
type TestServer struct {
	e     *e2e.Tester
	Mocks Mocks
}

type Mocks struct {
	Petstore *petstore.DownstreamMocks
	Pokeapi  *pokeapi.DownstreamMocks
}

func NewTestServer(t *testing.T, ctx context.Context, createService, cfg interface{}) *TestServer {
	return newTestServerImp(t, ctx, createService, cfg, false)
}

func NewTestServerWithActualDownstreams(t *testing.T, ctx context.Context, createService, cfg interface{}) *TestServer {
	return newTestServerImp(t, ctx, createService, cfg, true)
}

func newTestServerImp(t *testing.T, ctx context.Context, createService, cfg interface{}, withActualDownstreams bool) *TestServer {
	byteCfg, err := e2e.ConfigToYamlData(cfg, core.GetAppConfigType(createService))
	require.NoError(t, err, "Failed to convert cfg")

	testServer, ctx, testHooks := e2e.NewTester(t, context.Background(), byteCfg)

	if withActualDownstreams {
		testHooks.HTTPClientBuilder = nil
	}

	createService = e2e.CreateServiceWithTestHooksPatched(createService, testHooks)

	srv, err := NewServer(ctx, createService)

	require.NoError(t, err)
	err = srv.Start()
	require.NoError(t, err)

	var mocks Mocks
	if !withActualDownstreams {
		mocks = Mocks{
			Petstore: petstore.NewDownstreamMocks(testServer),
			Pokeapi:  pokeapi.NewDownstreamMocks(testServer),
		}
	}

	return &TestServer{
		e:     testServer,
		Mocks: mocks,
	}
}

func (t *TestServer) GetE2eTester() *e2e.Tester {
	return t.e
}

func (t *TestServer) Close() {
	t.e.Close()
}

type GetPetListTest struct {
	e  *e2e.Tester
	tc e2e.TestCall2
}

func (t *TestServer) GetPetList() *GetPetListTest {
	basePath := core.SelectBasePath("", t.e.CfgBasePath())
	if basePath == "/" {
		basePath = ""
	}
	u, err := url.Parse(fmt.Sprintf("%s/pet", basePath))
	if err != nil {
		panic(err)
	}

	return &GetPetListTest{
		e: t.e,
		tc: e2e.TestCall2{
			Method: "GET",
			URL:    u.String(),
		},
	}
}

func (t *GetPetListTest) WithHeaders(headers map[string]string) *GetPetListTest {
	t.tc.Headers = headers

	return t
}

func (t *GetPetListTest) ExpectResponseCode(code int) *GetPetListTest {
	t.tc.ExpectedCode = &code

	return t
}

func (t *GetPetListTest) ExpectResponseBody(body interface{}) *GetPetListTest {
	switch body := body.(type) {
	case []byte:
		t.tc.ExpectedBody = body
	case string:
		t.tc.ExpectedBody = []byte(body)
	default:
		var err error
		bodyMarshalled, err := json.Marshal(body)
		if err != nil {
			panic(fmt.Sprintf("Failed to convert body: %v", err))
		}
		t.tc.ExpectedBody = bodyMarshalled
	}

	return t
}

func (t *GetPetListTest) TestResponseCode(testCodeFn func(t *testing.T, actual int)) *GetPetListTest {
	t.tc.TestCodeFn = testCodeFn

	return t
}

func (t *GetPetListTest) TestResponseBody(testBodyFn func(t *testing.T, actual []byte)) *GetPetListTest {
	t.tc.TestBodyFn = testBodyFn

	return t
}

func (t *GetPetListTest) Send() {
	t.e.Do2(t.tc)
}
