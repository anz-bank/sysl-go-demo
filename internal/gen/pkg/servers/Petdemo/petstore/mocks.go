// Code generated by sysl DO NOT EDIT.
package petstore

import (
	"encoding/json"

	"github.com/anz-bank/sysl-go/testutil/e2e"
)

type DownstreamMocks struct {
	GetPetList *GetPetListMock
}

func NewDownstreamMocks(tester *e2e.Tester) *DownstreamMocks {
	return &DownstreamMocks{
		GetPetList: NewGetPetListMock(tester),
	}
}

type GetPetListMock struct {
	e     e2e.Endpoint
	tests []e2e.Tests
}

func NewGetPetListMock(tester *e2e.Tester) *GetPetListMock {
	d := tester.NewDownstream("petstore", "GET", "/pet")

	return &GetPetListMock{e: d}
}

func (d *GetPetListMock) ExpectHeaders(headers map[string]string) *GetPetListMock {
	d.tests = append(d.tests, e2e.ExpectHeaders(headers))

	return d
}

func (d *GetPetListMock) ExpectHeadersExist(headers []string) *GetPetListMock {
	d.tests = append(d.tests, e2e.ExpectHeadersExist(headers))

	return d
}

func (d *GetPetListMock) ExpectHeadersDoNotExist(headers []string) *GetPetListMock {
	d.tests = append(d.tests, e2e.ExpectHeadersDoNotExist(headers))

	return d
}

func (d *GetPetListMock) ExpectHeadersExistExactly(headers []string) *GetPetListMock {
	d.tests = append(d.tests, e2e.ExpectHeadersExistExactly(headers))

	return d
}

func (d *GetPetListMock) ExpectBodyPlain(body []byte) *GetPetListMock {
	d.tests = append(d.tests, e2e.ExpectBody(body))

	return d
}

func (d *GetPetListMock) ExpectQueryParams(query map[string][]string) *GetPetListMock {
	d.tests = append(d.tests, e2e.ExpectQueryParams(query))

	return d
}

func (d *GetPetListMock) Expect(test e2e.Tests) *GetPetListMock {
	d.tests = append(d.tests, test)

	return d
}

func (d *GetPetListMock) MockResponse(returnCode int, returnHeaders map[string]string, returnBody interface{}) {
	var bodyBytes []byte
	switch returnBody := returnBody.(type) {
	case []byte:
		bodyBytes = returnBody
	case string:
		bodyBytes = ([]byte)(returnBody)
	default:
		bodyBytes, _ = json.Marshal(returnBody)
	}
	d.tests = append(d.tests, e2e.Response(returnCode, returnHeaders, bodyBytes))
	d.e.Expect(d.tests...)
	d.tests = nil
}

func (d *GetPetListMock) MockResponsePlain(returnCode int, returnHeaders map[string]string, returnBody []byte) {
	d.tests = append(d.tests, e2e.Response(returnCode, returnHeaders, returnBody))
	d.e.Expect(d.tests...)
	d.tests = nil
}

func (d *GetPetListMock) Timeout() {
	d.tests = append(d.tests, e2e.ForceDownstreamTimeout())
	d.e.Expect(d.tests...)
	d.tests = nil
}
